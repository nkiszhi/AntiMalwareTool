
// CAD VirusCleanerDlg.cpp: 实现文件
//

#include "pch.h"
#include "framework.h"
#include "CAD VirusCleaner.h"
#include "CAD VirusCleanerDlg.h"
#include "afxdialogex.h"
#include "stdafx.h"
#include "CMyNewDLG.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
public:
	afx_msg void OnBnClickedButton5();
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)

END_MESSAGE_MAP()


// CCADVirusCleanerDlg 对话框



CCADVirusCleanerDlg::CCADVirusCleanerDlg(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_CADVirusCleaner_DIALOG, pParent)
{
	//m_hIcon = AfxGetApp()->LoadIcon(IDI_ICON1);
	m_hIcon = AfxGetApp()->LoadIcon(IDI_ICON1);
}

void CCADVirusCleanerDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_text, m_text);
	DDX_Control(pDX, IDC_EDIT1, m_keytext);
	DDX_Control(pDX, IDC_CHECK1, m_check);
}

BEGIN_MESSAGE_MAP(CCADVirusCleanerDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDOK, &CCADVirusCleanerDlg::OnBnClickedOk)
	ON_BN_CLICKED(IDC_CHECK1, &CCADVirusCleanerDlg::OnBnClickedCheck1)
	ON_WM_CTLCOLOR()
	ON_BN_CLICKED(IDC_BUTTON1, &CCADVirusCleanerDlg::OnBnClickedButton1)
END_MESSAGE_MAP()


// CCADVirusCleanerDlg 消息处理程序

BOOL CCADVirusCleanerDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != nullptr)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码
	static char key[1024] = { '\0' };
	static OVERLAPPED ol = { 0 };
	static DWORD fileSize = 1024;
	strTmpPath = L"\\CADCleaner.license";
	static HANDLE hFile = CreateFileW(strTmpPath, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED, NULL);
	if (hFile != INVALID_HANDLE_VALUE) {
		ReadFile(hFile, key, 1024 - 1, &fileSize, &ol);
		CloseHandle(hFile);
		CString cstr;
		USES_CONVERSION;
		cstr = A2T(key);
		m_keytext.SetWindowTextW(cstr);
	}
	m_brush.CreateSolidBrush(RGB(255, 255, 255)); //初始化背景色笔刷

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}


void CCADVirusCleanerDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CCADVirusCleanerDlg::OnPaint()
{
	
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CCADVirusCleanerDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}
//检测是否以管理员权限运行
BOOL IsRunAsAdministrator()
{
	BOOL fIsRunAsAdmin = FALSE;
	DWORD dwError = ERROR_SUCCESS;
	PSID pAdministratorsGroup = NULL;

	SID_IDENTIFIER_AUTHORITY NtAuthority = SECURITY_NT_AUTHORITY;
	if (!AllocateAndInitializeSid(
		&NtAuthority,
		2,
		SECURITY_BUILTIN_DOMAIN_RID,
		DOMAIN_ALIAS_RID_ADMINS,
		0, 0, 0, 0, 0, 0,
		&pAdministratorsGroup))
	{
		dwError = GetLastError();
		goto Cleanup;
	}

	if (!CheckTokenMembership(NULL, pAdministratorsGroup, &fIsRunAsAdmin))
	{
		dwError = GetLastError();
		goto Cleanup;
	}

Cleanup:

	if (pAdministratorsGroup)
	{
		FreeSid(pAdministratorsGroup);
		pAdministratorsGroup = NULL;
	}

	if (ERROR_SUCCESS != dwError)
	{
		throw dwError;
	}

	return fIsRunAsAdmin;
}
//提取管理员权限（此版本为简化版）
void GainAdminPrivileges(CString strApp) {
	SHELLEXECUTEINFO execinfo;
	memset(&execinfo, 0, sizeof(execinfo));
	execinfo.lpFile = strApp;
	execinfo.cbSize = sizeof(execinfo);
	execinfo.lpVerb = _T("runas");
	execinfo.fMask = SEE_MASK_NO_CONSOLE;
	execinfo.nShow = SW_SHOWDEFAULT;
	ShellExecuteEx(&execinfo);
}
//提取管理员权限（完整版）
void ElevateNow()
{
	BOOL bAlreadyRunningAsAdministrator = FALSE;
	try
	{
		bAlreadyRunningAsAdministrator = IsRunAsAdministrator();
	}
	catch (...)
	{

	}
	if (!bAlreadyRunningAsAdministrator)
	{
		WCHAR szPath[MAX_PATH];
		if (GetModuleFileName(NULL, szPath, ARRAYSIZE(szPath)))
		{
			SHELLEXECUTEINFO sei = { sizeof(sei) };

			sei.lpVerb = L"runas";
			sei.lpFile = szPath;
			sei.hwnd = NULL;
			sei.nShow = SW_SHOWDEFAULT;

			if (!ShellExecuteEx(&sei))
			{
				DWORD dwError = GetLastError();
				if (dwError == ERROR_CANCELLED)
					//Annoys you to Elevate it LOL
					CreateThread(0, 0, (LPTHREAD_START_ROUTINE)ElevateNow, 0, 0, 0);
			}
		}

	}
	else
	{
		///Code
	}
}
//按钮被点击
void CCADVirusCleanerDlg::OnBnClickedOk()
{
	// TODO: 在此添加控件通知处理程序代码
	
	CString cstr;
	m_keytext.GetWindowTextW(cstr);
	char *key = new char[1024];
	USES_CONVERSION;
	key = T2A(cstr);
		if (SLogin::activate(key)) {
			if(!IsRunAsAdministrator()){
				WCHAR path[MAX_PATH] = { 0 };
				GetModuleFileName(NULL, path, MAX_PATH);
				GainAdminPrivileges(path);
				CDialogEx::OnOK();
			}
			if (IsRunAsAdministrator()) {
				// 检测是否以管理员身份运行
				m_text.SetWindowTextW(L"已授予管理员权限");
				CButton* pBtn = (CButton*)GetDlgItem(IDC_CHECK1);
				int state = pBtn->GetCheck();
				if (state) {
					// 存放key
					OVERLAPPED olw = { 0 };
					HANDLE hFile = CreateFileW(strTmpPath, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
					DWORD fileSizew = 0;
					if (hFile != INVALID_HANDLE_VALUE) {
						WriteFile(hFile, key, 1024 - 1, &fileSizew, &olw);
						CloseHandle(hFile);
					}
				}
				CDialogEx::OnOK();
				CMyNewDLG DLG;
				DLG.DoModal();
			}
		}
		else m_text.SetWindowTextW(L"激活失败");
	//CDialogEx::OnOK();
}


//复选框被选中
void CCADVirusCleanerDlg::OnBnClickedCheck1()
{
	// TODO: 在此添加控件通知处理程序代码
}


HBRUSH CCADVirusCleanerDlg::OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor)
{
	//HBRUSH hbr = CDialogEx::OnCtlColor(pDC, pWnd, nCtlColor);

	// TODO:  在此更改 DC 的任何特性
	if (IDC_text == pWnd->GetDlgCtrlID())
	{
		pDC->SetTextColor(RGB(255,0,0));
	}
	// TODO:  如果默认的不是所需画笔，则返回另一个画笔
	//return hbr;
	return m_brush;
}




void CCADVirusCleanerDlg::OnBnClickedButton1()
{
	// TODO: 在此添加控件通知处理程序代码
	CDialogEx::OnCancel();
}
