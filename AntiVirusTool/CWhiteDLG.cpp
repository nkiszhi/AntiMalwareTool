// CWhiteDLG.cpp: 实现文件
//

#include "pch.h"
#include "CAD VirusCleaner.h"
#include "CWhiteDLG.h"
#include "afxdialogex.h"
//#include "CMyNewDLG.h"

#include <locale>   //写入中文的头
#include <regex>
using namespace std;

// 初始化listbox
void CWhiteDLG::initWhiteList() {
	int nlen = whitelist.size();
	CString str;
	str.Format(_T("%d"), nlen);
	for (int i = 0; i < nlen; i++) {
		CString cstring(whitelist[i]);
		m_white_list.AddString(cstring);
	}

}


// CWhiteDLG 对话框

IMPLEMENT_DYNAMIC(CWhiteDLG, CDialogEx)

CWhiteDLG::CWhiteDLG(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_DIALOG2, pParent)
{
	m2_hIcon = AfxGetApp()->LoadIcon(IDI_ICON1);
}

CWhiteDLG::~CWhiteDLG()
{
}

void CWhiteDLG::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_LIST1, m_white_list);
	DDX_Control(pDX, IDC_EDIT1, m_white_text_in);
}


BEGIN_MESSAGE_MAP(CWhiteDLG, CDialogEx)
	ON_BN_CLICKED(IDC_BUTTON1, &CWhiteDLG::OnBnClickedButton1)
	ON_BN_CLICKED(IDC_BUTTON2, &CWhiteDLG::OnBnClickedButton2)
	ON_BN_CLICKED(IDC_BUTTON3, &CWhiteDLG::OnBnClickedButton3)
	ON_BN_CLICKED(IDC_BUTTON4, &CWhiteDLG::OnBnClickedButton4)
END_MESSAGE_MAP()


// CWhiteDLG 消息处理程序

//初始化
BOOL CWhiteDLG::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// TODO:  在此添加额外的初始化
	//white_path = "./whitelist.txt";
	m2_brush.CreateSolidBrush(RGB(255, 255, 255));
	isDeletefile = false;  // 表示没有点击删除按钮
	initWhiteList();
	
	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m2_hIcon, TRUE);			// 设置大图标
	SetIcon(m2_hIcon, FALSE);		// 设置小图标
	return TRUE;  // return TRUE unless you set the focus to a control
				  // 异常: OCX 属性页应返回 FALSE
}

HBRUSH CWhiteDLG::OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor)
{
	//HBRUSH hbr = CDialogEx::OnCtlColor(pDC, pWnd, nCtlColor);

	// TODO:  在此更改 DC 的任何特性
	/*if (IDC_text == pWnd->GetDlgCtrlID())
	{
		pDC->SetTextColor(RGB(255, 0, 0));
	}*/
	// TODO:  如果默认的不是所需画笔，则返回另一个画笔
	//return hbr;
	return m2_brush;
}

//打开路径选择对话框
void CWhiteDLG::OpenSelectFold()
{
	CString    strFolderPath;
	BROWSEINFO broInfo = { 0 };
	TCHAR       szDisName[MAX_PATH] = { 0 };


	//broInfo.hwndOwner = this->m_hWnd;
	broInfo.pidlRoot = NULL;
	broInfo.pszDisplayName = szDisName;
	broInfo.lpszTitle = _T("选择路径");
	broInfo.ulFlags = BIF_NEWDIALOGSTYLE | BIF_DONTGOBELOWDOMAIN
		| BIF_BROWSEFORCOMPUTER | BIF_RETURNONLYFSDIRS | BIF_RETURNFSANCESTORS;
	broInfo.lpfn = NULL;
	broInfo.lParam = NULL;
	broInfo.iImage = IDI_ICON1;

	LPITEMIDLIST pIDList = SHBrowseForFolder(&broInfo);
	if (pIDList != NULL)
	{
		memset(szDisName, 0, sizeof(szDisName));
		SHGetPathFromIDList(pIDList, szDisName);
		strFolderPath = szDisName;
		m_white_text_in.SetWindowTextW(strFolderPath);
	}
}



//选择文件路径
void CWhiteDLG::OnBnClickedButton1()
{
	// TODO: 在此添加控件通知处理程序代码
	OpenSelectFold();
}


//添加按钮
void CWhiteDLG::OnBnClickedButton2()
{
	// TODO: 在此添加控件通知处理程序代码
	CString str;  //当前编辑框中的内容
	m_white_text_in.GetWindowTextW(str);
	int n = m_white_text_in.GetWindowTextLengthW();
	if (n == 0) {
		MessageBox(L"添加项为空，请重新选择", L"CAD病毒专杀工具", MB_ICONHAND);
	}
	else if (m_white_list.FindString(0, str) < 0) {
		CT2CA temps(str);   //CString to string，利用正则判断是否为.xx的后缀形式
		std::string strfile(temps);
		const std::regex pattern("\\.[a-z]+");  //文件后缀正则
		BOOLEAN ishouzhui = std::regex_match(strfile, pattern);

		const std::regex pattern2("^[A-z]:\\\\.*");  //文件路径正则
		BOOLEAN ispath = std::regex_match(strfile, pattern2);
		if (ishouzhui | ispath) {
			m_white_list.AddString(str);  //list box 添加
			whitelist.push_back(str.AllocSysString());  //whitelist 添加
			//AddToWhiteFile(white_path, str);
		}
		else {
			MessageBox(L"添加项不是文件后缀或文件路径，请重新添加", L"CAD病毒专杀工具", MB_ICONHAND);
		}
	}
	else {
		MessageBox(L"添加项重复，请重新选择", L"CAD病毒专杀工具", MB_ICONHAND);
	}
	m_white_text_in.SetWindowTextW(_T(""));
}

//删除按钮
void CWhiteDLG::OnBnClickedButton3()
{
	// TODO: 在此添加控件通知处理程序代码
	int nCurSel;
	CString str;
	nCurSel = m_white_list.GetCurSel();
	m_white_list.GetText(nCurSel, str);  //whitelis 删除
	m_white_list.DeleteString(nCurSel);  //list box删除
	vector<wchar_t*>::iterator it = find(whitelist.begin(), whitelist.end(), str.AllocSysString());
	for (it = whitelist.begin(); it != whitelist.end(); ) {
		if (it == whitelist.end() - 1) {
			whitelist.pop_back();
			break;
		}
		if (*it == str || *it == str.AllocSysString()) {
			it = whitelist.erase(it);
		}
		if (whitelist.size() == 0) {
			break;
		}
		else {
			++it;
		}
	}
}

//退出按钮
void CWhiteDLG::OnBnClickedButton4()
{
	// TODO: 在此添加控件通知处理程序代码
	WriteToFile();
	CDialogEx::OnCancel();
}

